Async Nature of JS, Callback hell, promises and Async Await.


1. What Does "Asynchronous" Mean?

    - It means that it can handle a large number of tasks at a time. This is a feature of multi-threaded programming languages, but JavaScript achieves it with a single thread with the help of event loop.

    - image (https://www.freecodecamp.org/news/content/images/2023/05/asynchronous-javascript---Page-3.png)


2. Now, these features of JavaScript might seem contradictory. How can a language that is supposed to execute only one task at a time (Single-threaded) be able to handle a large number of tasks (asynchronous) simultaneously? Let's see how?

    - For a browser to interpret JavaScript code, it needs to have a JavaScript engine.

    - The JavaScript runtime is the environment that contains all the resources necessary for the execution of a JavaScript program. It includes the JavaScript Engine but also includes other things.

    - even though JavaScript is single-threaded, it is also asynchronous. In asynchronous programming, a language can execute multiple tasks simultaneously.

    - To achieve this, JavaScript uses the browser's provided Web Application Programming Interfaces (Web APIs).

    - The Web APIs are a set of functions provided by the browser that the JavaScript engine can utilize. They include examples such as Document Object Model (DOM) manipulation methods, fetch, setInterval, setTimeout, promises, async-await functions, and more.


3. Now lets understand why JS is non blocking in nature?
    
    - Non blocking means that the language does not wait for a specific previous instruction to finish executing before it moves to the next one.

    - For example :

        › reading from a large file
        › making a network request
        › executing synchronous database queries
    
    - JavaScript has the ability to carry out asynchronous (or async) instructions. These instructions run in the background until they have finished processing.
    
    - Asynchronous instructions do not stop the JavaScript engine from actively accepting and processing more instructions.
    
    - That's why JavaScript is non-blocking in nature.


4. There are a few asynchronous features in JavaScript, and one of them is Promises.


5. The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.


6. Why we need Promises?

    - Promises were not always part of JavaScript. Callbacks worked together with asynchronous functions to produce desired results in the past. 
    
    - A callback is any function that is a parameter of an async function, which the async function invokes to complete its operation.

    - To call an async function, you had to pass a callback as an argument like this:

            function callback(result) {
                // Use the result from the Async operation
            }

            randomAsyncOperation((response) => callback(response));

    - But callbacks had a huge problem. Demonstrating the problem makes understanding it easier.

        › Assume you had an asynchronous function that fetched data somewhere on the internet.
        
        › This function should accept two callbacks, successCallback and failureCallback.
        
        › The successCallback would run if the operation was successful and the program found the appropriate resource. But the failureCallback would run if the operation was unsuccessful and could not find the resource.
 
            function SuccessCallback(result) {
               console.log("Resource found", result);
            }

            function failureCallback(error) {
                console.error("Ooops. Something went wrong", error);
            }
        
        › To run the async function, you had to pass the two 
        callback functions as arguments:

            fetchResource(url, successCallback, failureCallback)

        › Now assume you want to perform many other fetch operations, but each operation must be successful for the next one to run. This is useful if the data you need must come in a certain order and cannot be scattered.

        › In this case, your success callbacks would have their own success 
        callbacks, which is important because you need to use the results 
        if they come in.

            fetchResource(
                url,
                function (result) {
                    // Do something with the result
                    fetchResource(
                        newUrl,
                        function (result) {
                            // Do something with the new result
                            fetchResource(
                                anotherUrl,
                                function (result) {
                                    // Do something with the new result
                                },
                                failureCallback
                            );
                        },
                        failureCallback
                    );
                },
                failureCallback
            );

        › You would have to keep nesting your success callbacks while repeating the failureCallback every time you call the async function.

        › These nested callbacks led to the "Callback Pyramid of Doom" or "callback hell", which can quickly become a nightmare.


7. Promises Kicks in. JavaScript introduced Promises as part of ES6 (ES2015) to solve this problem.

    > What is a Promise?
    
        - A promise is an assurance or guarantee that something will happen in the future.

        - With this assurance (promise) comes two possible outcomes : either fulfillment or failure.

        - A promise is tied to an outcome that will show it is fulfilled. If that outcome does not happen, then the promise failed. A promise at the end must have one of these results.

        - A promise is tied to an outcome that will show it is fulfilled. If that outcome does not happen, then the promise failed. A promise at the end must have one of these results.

        - In JavaScript, a Promise is an object that will produce a single value some time in the future. 

        - If the promise is successful, it will produce a resolved value, but if something goes wrong then it will produce a reason why the promise failed.

        - promises can be in one of three possible states.

            a. pending: This is the default state of a defined promise
            b. fulfilled:  This is the state of a successful promise
            c. rejected: This is the state of a failed promise

        - A promise goes from pending to fulfilled, or from pending to rejected


8. How to Create a Promise in JavaScript

    - To create a promise, you need to create an instance object using the Promise constructor function

    - The Promise constructor function takes in one parameter

    - That parameter is a function that defines when to resolve the new promise, and optionally when to reject it.

        const promise = new Promise((resolve, reject) => {
            // condition to resolve or reject
            setTimeout(() => resolve("Done!"), 2000);
        });

    - In promises, resolve is a function with an optional parameter representing the resolved value
    
    - Also, reject is a function with an optional parameter representing the reason why the promise failed

    - In the example above, the resolved value of the promise is the string 'Done!'.

    - Another example to explain resolve and reject

    - You can see that you have control over when to resolve or reject your promise and can tie it to a certain condition


9. Promise with Callbacks

    - To create a callback for a promise, you need to use the .then() method.

    - This method takes in two callback functions.

    - The first function runs if the promise is resolved, while the second function runs if the promise is rejected.

        const promise = new Promise((resolve, reject) => {
            const num = Math.random()*10;

            console.log("the number is : ", num)

            if (num >= 5) {
                resolve("Promise is fulfilled!");
            } else {
                reject("Promise failed!");
            }
        });

        function handleResolve(value) {
            console.log(value);
        }

        function handleReject(reason) {
            console.error(reason);
        }

        promise.then(handleResolve, handleReject);

    - In the above example, if the random number generated is >= 5, promise is successful else not

    - That is the way to handle the possible outcomes of your promise. 

    - Promises make it incredibly easy to chain asynchronous instructions. 

    - When you handle a promise with the .then() method, the operation always returns another promise. 

    - However, because .then() returns another promise, this is how to write the same instructions above with promises:

        fetchResource(url)
        .then(handleResult, failureCallback)
        .then(handleNewResult, failureCallback)
        .then(handleAnotherResult, failureCallback)

    - You can even eliminate the repeated failureCallback to make the code a lot neater


10. Handling Errors in a Promise

    - To handle errors in Promises, use the .catch() method.

    - If anything goes wrong with any of your promises, this method can catch the reason for that error.

        Promise.reject(new Error()).catch((reason) => console.error(reason));

    - You can also use the .catch() method in a chain of promises. It catches the first error it encounters in the chain.

        fetchResource(url).then(handleResult).then(handleNewResult).then(handleAnotherResult).catch(failureCallback);

    - You can also use .catch() to check for errors in a group of promises before proceeding with further asynchronous operations.

        fetchResource(url)
        .then(handleResult)
        .then(handleNewResult)
        .catch(failureCallback)
        // Check for Errors in the above group of promises before proceeding
        .then(handleAnotherResult);

    - To chain an asynchronous operation to a promise regardless of if the promise is resolved or not, use the .finally() method

    - sometimes you might want an operation to run no matter what happens to earlier promises.

    - Using finally() helps prevent possible code repetition in .then() and .catch(). It is for operations you must run whether there is an error or not.

        fetchResource(url)
        .then(handleResult)
        .then(handleNewResult)
        .finally(onFinallyHandle);


11. How to Handle Many Promises at Once

    - So far we have been running promises one after the other.

    - In the previous examples, promises run similarly to synchronous code in the sense that they wait for the previous one to be resolved or rejected. 

    - But you could have multiple promises that run in parallel.

    - Here are the available methods that can help us achieve this:

        › Promise.all()
        › Promise.race()
        › Promise.any()
        › Promise.allSettled()

    - The Promise.all() method

        › Promise.all() accepts an array of promises as an argument but returns a single promise as the output
        
        › The single promise it returns resolves with an array of values if all the promises in the input array are fulfilled
        
        › The array Promise.all() resolves with will contain the resolve values of individual promises in the input array.

            const promise1 = Promise.resolve(`First Promise's Value`);

            const promise2 = new Promise((resolve) =>
                setTimeout(resolve, 3000, `Second Promise's Value`)
            );
            
            const promise3 = new Promise((resolve) =>
                setTimeout(resolve, 2000, `Third Promise's Value`)
            );

            Promise.all([promise1, promise2, promise3]);

            // Output on the console

            // *Promise {<fulfilled>: Array(3)}*

            Promise.all([promise1, promise2, promise3]).then((values) => {
                values.forEach((value) => console.log(value));
            });

            // Output on the console

            // First Promise's Value
            // Second Promise's Value
            // Third Promise's Value

        › If at least one promise in the input array does not resolve, Promise.all() will return a rejected promise with a reason. The reason for the rejection will be the same as that of the first rejected promise in the input array.

            const promise1 = Promise.resolve(`First Promise's Value`);
            const promise2 = new Promise((resolve, reject) =>
                setTimeout(reject, 2000, `First reason for rejection`)
            );
            const promise3 = new Promise((resolve, reject) =>
                setTimeout(reject, 3000, `Second reason for rejection`)
            );

            Promise.all([promise1, promise2, promise3]);

            // Output on the console

            // *Promise {<rejected>: "First reason for rejection"}*

        › Promise.all() will run all the input promises before it returns a value. But it does not run the promises one after the other-instead it runs them at the same time.

        › This is why the total time it would take Promise.all() to return a value is roughly the time it would take the longest promise in the array to finish.

    - The Promise.race() method

        › Promise.race() accepts an array of promises as an argument and returns a single promise as an output, resolved or not. 
        › Promise.race() will return the promise with the shortest execution time in an array of promises.

            const promise1 = new Promise((resolve) =>
                setTimeout(resolve, 3000, `First Promise's Value`)
            );
            const promise2 = new Promise((resolve) =>
                setTimeout(resolve, 2000, `Second Promise's Value`)
            );
            const promise3 = Promise.resolve(`Third Promise's Value`);

            Promise.race([promise1, promise2, promise3]);

            // Output on the console

            // *Promise {<fulfilled>: "Third Promise's Value"}*

        › In the example above, because promise3 is a promise that resolves on being created, Promise.race() returns it as the fastest.

        › Promise.race() returns a rejected promise and the reason why the fastest promise was rejected.

    - The Promise.any() method

        › Promise.any() accepts an array of Promises as an argument but returns a single Promise as the output
        
        › The single promise it returns is the first resolved promise in the input array

            const promise1 = new Promise((resolve) =>
                setTimeout(resolve, 3000, `First Promise's Value`)
            );
            const promise2 = new Promise((resolve) =>
                setTimeout(resolve, 2000, `Second Promise's Value`)
            );
            const promise3 = Promise.reject(`Third Promise's Value`);

            Promise.any([promise1, promise2, promise3]);

            // Output on the console

            // *Promise {<fulfilled>: "Second Promise's Value"}*
        
        › If none of the promises in the array are resolved, Promise.any() returns a rejected promise. This rejected promise contains a JavaScript array of reasons, where each reason corresponds with that of a promise from the input array.

            const promise1 = new Promise((resolve, reject) =>
                setTimeout(reject, 3000, `First rejection reason`)
            );
            const promise2 = new Promise((resolve, reject) =>
                setTimeout(reject, 2000, `Second rejection reason`)
            );
            const promise3 = Promise.reject(`Third rejection reason`);

            Promise.any([promise1, promise2, promise3]);

            // Output on the console

            // *Promise {<rejected>: Aggregate Error: All Promises were rejected}*

            Promise.any([promise1, promise2, promise3]).catch(({ errors }) =>
                console.log(errors)
            );

            // Output on the console

            // *(3) ["First* rejection reason*", "Second* rejection reason*", "Third* rejection reason*"]*

        › This method is useful for asynchronous operations where the fastest successful promise is all you need

    - The Promise.allSettled() method
        
        › It handles promises in parallel just like the other promise methods 
        
        › Promise.allSettled() helps to write more efficient asynchronous code as it shows the outcome of all the promises in the array regardless of the status-resolved or rejected
        
        › Promise.allSettled() accepts an array of promises as an argument and returns a single promise as the output.
        
        › The single promise it returns will always resolve or enter the state 'fulfilled' after all the input promises are settled
        
        › The single promise it returns will always resolve or enter the state 'fulfilled' after all the input promises are settled. It does not care if any individual promise in the input array rejected.

            const promise1 = new Promise((resolve) =>
                setTimeout(resolve, 3000, `First Promise's Value`)
            );
            const promise2 = new Promise((resolve) =>
                setTimeout(resolve, 2000, `Second Promise's Value`)
            );
            const promise3 = Promise.reject(`Third Promise's Value`);

            Promise.allSettled([promise1, promise2, promise3]);

            // Output on the console
            // *Promise {<fulfilled>: Array(3)}*

            Promise.allSettled([promise1, promise2, promise3]).then(console.log);

            // Output on the console
            /*
            (3) [{…}, {…}, {…}]
            0: {status: 'fulfilled', value: "First Promise's Value"}
            1: {status: 'fulfilled', value: "Second Promise's Value"}
            2: {status: 'rejected', reason: "Third Promise's Value"}
            */

        From the example above, you can see that even though promise3 rejects on creation, Promise.allSettled() still returned a 'fulfilled' promise. It does this even if all the promises in the input array reject.
        The difference is Promise.all() can only be successful if all the promises in the input are resolved, while Promise.allSettled() does not care about the status of the input promises.


12. Async/Await Kicks in !!!

    - What is the Async/Await Syntax?
    
        › Async/await syntax became a feature of JavaScript with the release of ES8(ES2017). It is built on top of promises, and you can see it as an alternative syntax to promises.
        
        › async/await eliminates the chaining that is common with the promises syntax, and ends up making asynchronous code look a lot more synchronous.
        
        › Promises are an excellent way to avoid the previously discussed "Callback Pyramid of Doom", but async/await takes asynchronous code further
        
        › With async/await, code is easier to follow and maintain. It came about as a way to improve code readability for asynchronous operations. It's nothing more than a syntax to handle promises in a more modern way

    - How to Write Async functions?

        › async is a JavaScript keyword used to create a function. The function this keyword helps create will always return a promise.

            async function example() {
                // Return a value
            }

            example()

            // Output on the console

            // *Promise {<fulfilled>: undefined}*

        › From the code example, you can see that the function returns a promise with a value undefined
        
        › This is because anything the async function returns will be the resolved value of the resulting promise
        
        › In this case, the function does not return anything, hence undefined.

            async function example() {
                return "Feels good to be an async function";
            }
            
            example();
            console.log(example());
            
            // Output on the console
            // *Promise {<fulfilled>: "Feels good to be an async function"}*
        
        › In the above example, the function returns a string, which becomes the resolved value of the resulting promise. That is the way to create an async function.

    - How to Use the Await Keyword?

        › To use the await keyword, place it before a promise. It is an indicator for the async function to pause execution until that promise is settled.
        
        › It is similar to the .then() method which makes sure a promise is 'fulfilled' or 'rejected' before it continues
        
        › Note that you can only use the await keyword inside an async function.
        
        › Instead of chaining promises with .then() as the article earlier teaches, you can repeatedly await the asynchronous operations making your code cleaner and easier to read.
        
        › Using the await keyword before a promise will produce the resolved value of that promise. It is evident from the line const result = await promise('promise finished!') where  result becomes a string and not a new promise.
        
        › This is different from .then() which always returns a new promise.
        
        › With await, you can break up any chain of promises, and grab their resolve values. The following example uses the fetch() function—which is a promise—to show eliminating chaining with async/await.

            // With chaining
            fetch("https://jsonplaceholder.typicode.com/users")
                .then((response) => response.json())
                .then((result) => console.log(result));

            // Output on the console
            // Array(10) [...]

            // Without chaining
            async function fetchResource(url) {
                const response = await fetch(url);
                const result = await response.json();
                console.log(result);
            }

            fetchResource("https://jsonplaceholder.typicode.com/users");

            // Output on the console
            // Array(10) [...]

        › In the end, it boils down to preference and choice. If you prefer the chaining syntax, then go for it. If you prefer your code to look synchronous and want to use async/await, then that is fine too.

    - How to Handle Errors in Async/Await
        
        › Just like with the normal promise syntax, you can catch errors properly using async/await. 
        
        › Properly handling errors in async calls is extremely important to track bugs. Use try/catch blocks to do this.
        
        › try is a JavaScript keyword that wraps a block of code. As that block of code runs, try checks for errors.
        
        › No error can escape a try block. Use try inside an async function.
        
        › The first error inside the try block stops the other instructions in that block from executing, try then passes the error value to the catch block.
        
        › The catch block is similar to .catch() in promises. Just like the promise method, it is a function of an error.

            async function fetchResource(url) {
                try {
                    const response = await fetch(url);
                    const result = await response.json();
                    console.log(result);
                } catch (error) {
                    console.error(error);
                }
            }

        › In this example, the catch keyword has an error, which logs to the console. A settled promise with an uncaught error results in a rejected promise.
        
        › Also, just like the .finally() method for promises, you can use a finally block inside an async function. Braces that follow this keyword wrap around a block of code that would run regardless of if there is an error or not.

            async function fetchResource(url) {
                try {
                    const response = await fetch(url);
                    const result = await response.json();
                    console.log(result);
                } catch (error) {
                    console.error(error);
                } finally {
                    console.log("Operation finished!");
                }
            }


13. What is a Job Queue?

    - The Job Queue, also known as the Microtask Queue

    - It was not originally a component of the JavaScript runtime, but the need for it came when promises became a part of JavaScript.

    - Consider the following code sample:

        Promise.resolve("This is a resolved value").then(console.log);
        setTimeout(console.log, 0, "This is a value after the timeout");
        console.log("This is a normal log");

        // Output on the console
        /*
        This is a normal log
        This is a resolved value
        --
        undefined
        --
        This is a value after the timeout
        */

        › The first log is from console.log. It is not so confusing because console.log() is not an async operation. The JavaScript engine will actively run every synchronous instruction immediately after the program starts.

        › But in 2nd line, the resolved value of the promise comes before setTimeout

        › simple answer is that a promise is faster than any other async implementation in JavaScript. But that is not the full story.

        › The JavaScript Runtime actually has these two queues—the Callback (or Macrotask) Queue and the Job (or Microtask) Queue. 
        
        ›  Shortly before the event loop starts calling the functions in the Callback Queue, it calls all the instructions on the Job Queue
        
        › The callback of a promise stays in the Job Queue so the event loop calls it first. This is why promises return values faster than any other async implementation.
        
        › image(https://www.freecodecamp.org/news/content/images/2023/06/event-loop.gif)
        
        › The callback in setTimeout()will always move to the Callback Queue no matter how short the timer is. In the example, it logged last even though the timer was set to 0 millisecond.

    - More on Micro and Macro task (https://medium.com/@saravanaeswari22/microtasks-and-macro-tasks-in-event-loop-7b408b2949e0)

    - More on Job Queue and Task Queue (https://blog.greenroots.info/task-queue-and-job-queue-deep-dive-into-javascript-event-loop-model)